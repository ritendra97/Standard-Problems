import java.util.ArrayList;
public class Graph
{
	int Time=0;
	int V;
	ArrayList<ArrayList<Integer>> graph;
	boolean visited[];
    Graph(int v)
	{
		V=v;
		graph = new ArrayList<ArrayList<Integer>>(V);
		visited = new boolean[V];
		
		for(int i=0;i<V;i++)
		{
			graph.add(i,new ArrayList<Integer>());
		}
	    Time=0;
	}
	public void addEdge(int v,int w)
	{
		graph.get(v).add(w);
		graph.get(w).add(v);
	}
	public void DFS(int u,int disc[],int low[],int parent[])
	{
		disc[u]=Time;
		low[u]=Time;
		Time++;
		for(Integer child : graph.get(u))
		{
			if(disc[child]==-1)
			{
				parent[child]=u;
				DFS(child,disc,low,parent);
				low[u]=Math.min(low[u], low[child]);
				if(low[child]>disc[u])
					System.out.println("Bridge is: "+u+" "+child);
			}
			else if(parent[u]!=child)
			{
				low[u]=Math.min(low[u], disc[child]);
			}
				
		}
	}
	public void get_bridge()
	{
		int disc[] = new int[V];
		int low[]  = new int[V];
		int parent[] = new int[V];
		for(int i=0;i<V;i++)
		{
			disc[i]=-1;
			low[i]=-1;
			parent[i]=-1;
		}
		for(int i=0;i<V;i++)
		{
			if(disc[i]==-1)
			{
				DFS(i,disc,low,parent);
			}
		}
	}
	public static void main(String[] args) 
	{
		System.out.println("Bridges ingraph "); 
        Graph g1 = new Graph(5); 
        g1.addEdge(1, 0); 
        g1.addEdge(0, 2); 
        g1.addEdge(2, 1); 
        g1.addEdge(0, 3); 
        g1.addEdge(3, 4);
        
        g1.get_bridge();
	}
}

//Sudoku
import java.util.*;
public class Matrix 
{
	public static void sudokuAutomation(int[][] board,int n,int row,int col)
	{
		if (row == n - 1 && col == n)
		{
			print(board,n);
			return;
		}
		if(col == board[row].length)
		{
			row++;
			col=0;
		}	
		if(board[row][col]!=0)
			sudokuAutomation(board,n,row,col+1);
		else
		{
			for(int po=1;po<=9;po++)
			{
				if(isValid(board,row,col,po))
				{
					board[row][col]=po;
					sudokuAutomation(board,n,row,col+1);
					board[row][col]=0;
				}
			}
		}
	}
	public static boolean isValid(int [][] board,int x,int y,int val)
	{
		for(int i=0;i<board[x].length;i++)
		{
			if(board[x][i]==val)
				return false;
		}
		
		for(int i=0;i<board.length;i++)
		{
			if(board[i][y]==val)
				return false;
		}
		
		int cx=x/3*3;
		int cy=y/3*3;
		
		for(int i=0;i<3;i++)
		{
			for(int j=0;j<3;j++)
			{
				if(board[cx+i][cy+j]==val)
					return false;
			}
		}
		
		return true;
	}
	public static void print(int[][] board,int N)
	{
		for(int i=0;i<N;i++)
		{
			for(int j=0;j<N;j++)
			{
				System.out.print(board[i][j]+" ");
				System.out.print(" ");
			}
			System.out.println();
		}
	}
	public static void main(String[] args) 
	{
		int[][] board = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
				         {5, 2, 0, 0, 0, 0, 0, 0, 0},
						 {0, 8, 7, 0, 0, 0, 0, 3, 1},
						 {0, 0, 3, 0, 1, 0, 0, 8, 0},
						 {9, 0, 0, 8, 6, 3, 0, 0, 5},
						 {0, 5, 0, 0, 9, 0, 6, 0, 0},
						 {1, 3, 0, 0, 0, 0, 2, 5, 0},
						 {0, 0, 0, 0, 0, 0, 0, 7, 4},
						 {0, 0, 5, 2, 0, 6, 3, 0, 0}};
		int N = board.length;
		sudokuAutomation(board,N,0,0);
	}	
}

//Nqueen Problem
import java.util.*;

public class DynamicProgramming {

	public static void Helper(List<List<String>> result, char board[][], int row, int n) {

		if (row == n) {
			result.add(construct(board));
			return;
		}

		for (int i = 0; i < n; i++) {

			if (isQueenSafe(board, row, i, n)) {
				board[row][i] = 'Q';

				Helper(result, board, row + 1, n);
				board[row][i] = '.';
			}
		}
	}

	private static List<String> construct(char[][] board) {
		List<String> res = new ArrayList<String>();
		for (int i = 0; i < board.length; i++) {
			String s = new String(board[i]);
			res.add(s);
		}
		return res;
	}

	public static boolean isQueenSafe(char board[][], int row, int col, int n) {

		// State upbard
		for (int j = col, i = row - 1; i >= 0; i--) {
			if (board[i][j] == 'Q')
				return false;
		}

		// left side
		for (int j = col-1, i = row - 1; i >= 0 && j >= 0; i--, j--) {
			if (board[i][j] == 'Q')
				return false;
		}

		// right side
		for (int j = col+1, i = row - 1; i >= 0 && j < n; i--, j++) {
			if (board[i][j] == 'Q')
				return false;
		}

		return true;
	}

	public static List<List<String>> solveNQueens(int n) {
		
		char[][] board = new char[n][n];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				board[i][j] = '.';
		List<List<String>> res = new ArrayList<List<String>>();
		
		Helper(res, board, 0, n);
		
		return res;
	}

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter the Number: ");
		int n = sc.nextInt();
		System.out.println(solveNQueens(n));
	}
}
import java.util.*;
public class Backracking 
{
	
	public static void printSolution(int board[][],int N) 
	{ 
	   for (int i = 0; i < N; i++) { 
	      for (int j = 0; j < N; j++) 
	         System.out.print(" " + board[i][j]+ " "); 
	            System.out.println(); 
	   } 
	}
	public static boolean solveNQUtil(int board[][],int row, boolean cols[],boolean ndiag[],boolean rdiag[],int N) 
    { 
		if(row>=board.length)
		{
			return true;
		}
		for(int col=0;col<board[0].length;col++)
		{
			if(board[row][col]==0 && cols[col]==false && ndiag[row+col]==false && rdiag[row-col+board.length-1]==false)
			{
				board[row][col]=1;
				cols[col]=true;
				ndiag[row+col]=true;
				rdiag[row-col+board.length-1]=true;
				if(solveNQUtil(board,row+1,cols,ndiag,rdiag,N))
				 return true;
				board[row][col]=0;
				cols[col]=false;
				ndiag[row+col]=false;
				rdiag[row-col+board.length-1]=false;
			}
		}
		return false;
    }
	public static void main(String[] args) 
	{
		int board[][] = { { 0, 0, 0, 0 }, 
                { 0, 0, 0, 0 }, 
                { 0, 0, 0, 0 }, 
                { 0, 0, 0, 0 } };
		int N = 4;
		boolean cols[] = new boolean[N];
		boolean ndiag[] = new boolean[2*N-1];
		boolean rdiag[] = new boolean[2*N-1];
		solveNQUtil(board,0,cols, ndiag,rdiag,N);
		printSolution(board,N);
	}
}

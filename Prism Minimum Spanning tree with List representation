//Prism Minimum Spanning tree with List representation
import java.util.*;
class Edge
{
	int targetNode;
	int distance;
	Edge(int targetNode,int distance)
	{
		this.targetNode=targetNode;
		this.distance=distance; 
	}
}
class pair
{
	int v;
	int av;//acuring vertices.
	int dis;
	pair(int v,int av,int dis)
	{
		this.v=v;
		this.av=av;
		this.dis=dis;
	}
}
public class GraphProblem 
{
	int mincost=0;
	ArrayList<ArrayList<Edge>> graph;
	boolean visited[];
	int V;
	GraphProblem(int v)
	{
		V=v;
		visited = new boolean[V+1];
		graph = new ArrayList<ArrayList<Edge>>(V);
		for(int i=0;i<V;i++)
		{
			graph.add(i,new ArrayList<Edge>());
		}
	}
	public void addEdge(int source,int target,int dis)
	{
		graph.get(source).add(new Edge(target,dis));
		graph.get(target).add(new Edge(source,dis));
	}
	public void Prism_MST()
	{
		PriorityQueue<pair> pq = new PriorityQueue<>(new Comparator<pair>() {
			public int compare(pair e1,pair e2)
			{
				return e1.dis - e2.dis;
			}
		});
		pq.add(new pair(0,-1,0));
		while(!pq.isEmpty())
		{
			pair temp = pq.remove();
			if(visited[temp.v]==true)
			{
				continue;
			}
			visited[temp.v]=true;
			if(temp.av!=-1)
			{
				System.out.println(" "+temp.v+" "+temp.av+" "+temp.dis);
			}
			for(Edge e : graph.get(temp.v))
			{
				pq.add(new pair(e.targetNode,temp.v,e.distance));
			}
		}
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(9);
		g.addEdge( 0, 1, 4); 
        g.addEdge( 0, 7, 8); 
        g.addEdge( 1, 2, 8); 
        g.addEdge( 1, 7, 11); 
        g.addEdge( 2, 3, 7); 
        g.addEdge( 2, 8, 2); 
        g.addEdge( 2, 5, 4); 
        g.addEdge( 3, 4, 9); 
        g.addEdge( 3, 5, 14); 
        g.addEdge( 4, 5, 10); 
        g.addEdge( 5, 6, 2); 
        g.addEdge( 6, 7, 1); 
        g.addEdge( 6, 8, 6); 
        g.addEdge( 7, 8, 7); 
		g.Prism_MST();
	}
}

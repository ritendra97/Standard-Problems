//Kruskal's algorithm implementation
import java.util.*;
class Edge implements Comparable<Edge>
{
	int src;
	int des;
	int weight;
	Edge()
	{}
	public int compareTo(Edge o1) {
		return this.weight-o1.weight;
	};
	
}
class Node
{
	int parent;
	int rank;
	Node()
	{};
}
public class Graph 
{
	Edge[] edge;
	int ne;
	int nv;
	Node[] dsuf;
	Graph(int E,int V)
	{
		ne=E;
		nv=V;
		edge = new Edge[E];
		for(int i=0;i<E;i++)
		{
			edge[i]=new Edge();
		}
		//dsuf->disjoint set union find operation
		dsuf= new Node[E];
		for(int i=0;i<E;i++)
		{
			dsuf[i] = new Node();
		}
		for(int i=0;i<E;i++)
		{
			dsuf[i].parent=-1;
			dsuf[i].rank=0;
		}
	}
	int find(int v)
	{
		if(dsuf[v].parent==-1)
			return v;
		return dsuf[v].parent =find(dsuf[v].parent);
	}
	void union_op(int fromP,int topP)
	{
		if(dsuf[fromP].rank>dsuf[topP].rank)
			dsuf[topP].parent=fromP;
		else if(dsuf[fromP].rank<dsuf[topP].rank)
			dsuf[fromP].parent=topP;
		else
		{
			dsuf[fromP].parent=topP;
			dsuf[topP].rank+=1;
		}
	}
	void Kruskals()
	{
		Arrays.sort(edge);
		int i=0;int j=0;
		while(i<nv-1 && j<ne)
		{
			int fromP = find(edge[i].src);
			int topP = find(edge[i].des);
			
			if(fromP==topP)
			{
				j++;
				continue;
			}
			union_op(fromP,topP);
			i++;
		}
	}
	void printMST()
	{
		System.out.println("MST formed is\n");
		for(Edge p: mst)
			System.out.println("src: "+p.src+"  dst: "+p.des+"  wt: "+p.weight+"\n");
	}
	public static void main(String[] args) 
	{
		 int V = 5; // Number of vertices in graph
	        int E = 5; // Number of edges in graph
	        Graph graph = new Graph(V, E);
	 
	        // add edge 0-1
	        graph.edge[0].src = 0;
	        graph.edge[0].des = 1;
	        graph.edge[0].weight = 10;
	 
	        // add edge 0-2
	        graph.edge[1].src = 0;
	        graph.edge[1].des = 2;
	        graph.edge[1].weight = 6;
	 
	        // add edge 0-3
	        graph.edge[2].src = 0;
	        graph.edge[2].des = 3;
	        graph.edge[2].weight = 5;
	 
	        // add edge 1-3
	        graph.edge[3].src = 1;
	        graph.edge[3].des = 3;
	        graph.edge[3].weight = 15;
	 
	        // add edge 2-3
	        graph.edge[4].src = 2;
	        graph.edge[4].des = 3;
	        graph.edge[4].weight = 4;
	        
	        graph.Kruskals();
	        //graph.printMST();
	    	
	}
}

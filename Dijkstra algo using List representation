import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

class Edge{
    int vertex;
    int weight;

    Edge(int vertex, int weight){
        this.vertex = vertex;
        this.weight = weight;
    }
}

public class Solution {

    public static void main(String[] args) {
        int n = 5;
        ArrayList<ArrayList<Edge> > adj = new ArrayList<ArrayList<Edge> >();

        for (int i = 0; i < n; i++)
            adj.add(new ArrayList<Edge>());

        adj.get(0).add(new Edge(1, 2));
        adj.get(1).add(new Edge(0, 2));

        adj.get(1).add(new Edge(2, 4));
        adj.get(2).add(new Edge(1, 4));

        adj.get(0).add(new Edge(3, 1));
        adj.get(3).add(new Edge(0, 1));

        adj.get(3).add(new Edge(2, 3));
        adj.get(2).add(new Edge(3, 3));

        adj.get(1).add(new Edge(4, 5));
        adj.get(4).add(new Edge(1, 5));

        adj.get(2).add(new Edge(4, 1));
        adj.get(4).add(new Edge(2, 1));

        Solution obj = new Solution();
        obj.shortestPath(0, adj, n);
    }

    private void shortestPath(int src, ArrayList<ArrayList<Edge>> adj, int n) {

        PriorityQueue<Edge> pq = new PriorityQueue<>(new Comparator<Edge>() {
            @Override
            public int compare(Edge o1, Edge o2) {
                if(o1.weight<o2.weight) return -1;
                else if( o1.weight>o2.weight) return 1;
                else return 0;
            }
        });

        int dis[] = new int[n];
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[src] = 0;
        pq.add(new Edge(src, 0));

        while (!pq.isEmpty()){
            int ngh = pq.peek().vertex;
            int prvWeight = pq.peek().weight;
            pq.remove();

            for(Edge children : adj.get(ngh)){
                int child = children.vertex;
                int newWeight = children.weight;

                if(dis[child]>prvWeight+newWeight){
                    dis[child] = prvWeight+newWeight;
                    pq.add(new Edge(child,dis[child]));
                }
            }
        }

        System.out.println("The distances from source "+src+" are : ");
        for (int i = 0; i < n; i++)
        {
            System.out.print( dis[i] + " ");
        }
    }


}




package JavaPrograms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

class Edge{
    int vertex;
    int weight;

    Edge(int vertex, int weight){
        this.vertex = vertex;
        this.weight = weight;
    }
}
public class Dijkashtra_Algorithm {

    public static void main(String[] args) {
        int n = 5;
        ArrayList<ArrayList<Edge> > adj = new ArrayList<ArrayList<Edge> >();

        for (int i = 0; i < n; i++)
            adj.add(new ArrayList<Edge>());

        adj.get(0).add(new Edge(1, 2));
        adj.get(1).add(new Edge(0, 2));

        adj.get(1).add(new Edge(2, 4));
        adj.get(2).add(new Edge(1, 4));

        adj.get(0).add(new Edge(3, 1));
        adj.get(3).add(new Edge(0, 1));

        adj.get(3).add(new Edge(2, 3));
        adj.get(2).add(new Edge(3, 3));

        adj.get(1).add(new Edge(4, 5));
        adj.get(4).add(new Edge(1, 5));

        adj.get(2).add(new Edge(4, 1));
        adj.get(4).add(new Edge(2, 1));

        Dijkashtra_Algorithm obj = new Dijkashtra_Algorithm();
        obj.shortestPath(0, adj, n);
    }

    private void shortestPath(int src, ArrayList<ArrayList<Edge>> adj, int n) {

        int distance[] = new int[n];
        Arrays.fill(distance,Integer.MAX_VALUE);
        distance[src] = 0;

        PriorityQueue<Edge> pq = new PriorityQueue<>(new Comparator<Edge>() {
            @Override
            public int compare(Edge o1, Edge o2) {
                if(o1.weight<o2.weight) return -1;
                else if(o1.weight>o2.weight) return 1;
                return 0;
            }
        });

        pq.add(new Edge(src,0));

        while (!pq.isEmpty()){
            Edge node = pq.remove();

            for(Edge neighbour:adj.get(node.vertex)){
                if(distance[node.vertex]+neighbour.weight<distance[neighbour.vertex]){
                    distance[neighbour.vertex] = distance[node.vertex]+neighbour.weight;
                    pq.add(new Edge(neighbour.vertex,distance[neighbour.vertex]));
                }
            }
        }

        System.out.println("The distances from source "+src+" are : ");
        for (int i = 0; i < n; i++)
        {
            System.out.print( distance[i] + " ");
        }
    }
}

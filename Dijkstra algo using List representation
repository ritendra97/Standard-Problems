//Dijkstra algo using List representation
import java.util.ArrayList;
import java.util.*;
class Edge
{
	int v;
	int dis;
	Edge(int v,int dis)
	{
		this.v=v;
		this.dis=dis;
	}
}
class pair
{
	int v;
	String psf;
	int dis;
	pair(int v,String psf,int dis)
	{
		this.v=v;
		this.psf=psf;
		this.dis=dis;
	}
}
public class GraphProblem 
{
	int V;
	ArrayList<ArrayList<Edge>> graph;
	boolean visited[];
    GraphProblem(int v)
	{
		V=v;
		graph = new ArrayList<ArrayList<Edge>>(V);
		visited = new boolean[V];
		for(int i=0;i<V;i++)
		{
			graph.add(i,new ArrayList<Edge>());
		}
	}
	public void addEdge(int v,int w,int dis)
	{
		graph.get(v).add(new Edge(w,dis));
		graph.get(w).add(new Edge(v,dis));
	}
	public void dijkastra(int source)
	{
		PriorityQueue<pair> pq = new PriorityQueue<pair>(new Comparator<pair>()
		{ 
			public int compare(pair e1, pair e2)
			{
				return e1.dis-e2.dis;
			}
		});
		pq.add(new pair(source,source+" ",0));
		while(!pq.isEmpty())
		{
			pair temp = pq.remove();
			if(visited[temp.v]==true)
				continue;
			visited[temp.v]=true;
			System.out.println(" psf is: "+temp.psf+" dis is: "+temp.dis);
			for(Edge e :graph.get(temp.v))
			{
				pq.add(new pair(e.v,temp.psf+e.v+" ",temp.dis+e.dis));
			}
		}
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(9);
		g.addEdge( 0, 1, 4); 
        g.addEdge( 0, 7, 8); 
        g.addEdge( 1, 2, 8); 
        g.addEdge( 1, 7, 11); 
        g.addEdge( 2, 3, 7); 
        g.addEdge( 2, 8, 2); 
        g.addEdge( 2, 5, 4); 
        g.addEdge( 3, 4, 9); 
        g.addEdge( 3, 5, 14); 
        g.addEdge( 4, 5, 10); 
        g.addEdge( 5, 6, 2); 
        g.addEdge( 6, 7, 1); 
        g.addEdge( 6, 8, 6); 
        g.addEdge( 7, 8, 7); 
        g.dijkastra(0);
	}
}

//Topological Sort
import java.util.*;
public class GraphProblem 
{
	int V;
	ArrayList<ArrayList<Integer>> graph;
	HashMap<Integer,Integer> incommingsource;
	int visitnodes;
	GraphProblem(int v)
	{
		V=v;
		visitnodes=0;
		graph = new ArrayList<ArrayList<Integer>>(V);
		incommingsource = new HashMap<>();
		for(int i=0;i<V;i++) 
		{
			graph.add(i,new ArrayList<Integer>());
			incommingsource.put(i, 0);
		}
	}
	public void addEdge(int v,int w)
	{
		graph.get(v).add(w);
		incommingsource.put(w,incommingsource.get(w)+1);
	}
	public List<Integer> topologialsort()
	{
		Queue<Integer> q = new LinkedList<>();
		for(Map.Entry<Integer, Integer> entry : incommingsource.entrySet())
		{
			if(entry.getValue()==0)
			{
				q.add(entry.getKey());
			}
		}
		List<Integer> result = new ArrayList<>();
		while(!q.isEmpty())
		{
			visitnodes++;
			int temp = q.remove();
			result.add(temp);
			List<Integer>ChildList = graph.get(temp);
			for(Integer child:ChildList)
			{
				incommingsource.put(child,incommingsource.get(child)-1);
				if(incommingsource.get(child)==0)
				{
					q.add(child);
				}
			}
			
		}
		if(result.size()!=V)
		{
			System.out.println("There is cycle in the graph:");
			return new ArrayList<>();
		}
		return result;
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(6);
		g.addEdge(0, 1);
		g.addEdge(0, 2);
		g.addEdge(1, 3);
		g.addEdge(1, 4);
		g.addEdge(2, 4);
		g.addEdge(3, 5);
		g.addEdge(4, 5);
		System.out.println(g.topologialsort());
	}
}

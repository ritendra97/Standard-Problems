//Rotten Oranges

//Time Complexity: O( R *C). 
Each element of the matrix can be inserted into the queue only once so the upper bound of iteration is O(R*C), i.e. the number of elements. So time complexity is O(R *C).
import java.util.*;


import java.util.LinkedList;
import java.util.Queue;

class pair{
    int row;
    int col;
    int time;
    pair(int row, int col, int time){
        this.row = row;
        this.col = col;
        this.time = time;
    }

}
class ArrayProblems{
    
    public static int orangesrotten(int grid[][]){
        
        int n = grid.length;
        int m = grid[0].length;
        
        Queue<pair> q = new LinkedList<>();
        int visited[][] = new int[n][m];

        int freashcount = 0;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==2){
                    visited[i][j] = 2;
                    q.add(new pair(i, j, 0));
                }else if(grid[i][j]==1){
                    freashcount++;
                }else{
                    visited[i][j] = 0;
                }
            }
        }

        int tm = 0;
        int row[] = {-1,1,0,0};
        int col[] = {0,0,-1,1};
        int ct = 0;

        while(!q.isEmpty()){
            int c = q.peek().col;
            int r = q.peek().row;
            int t = q.peek().time;
            tm = Math.max(tm, t);
            q.remove();
            for(int i = 0;i<4;i++){
                int nrow = r+row[i];
                int ncol = c+col[i];
                if((nrow>=0 && ncol>=0 && ncol<m && nrow<n) &&(visited[nrow][ncol]==0 && grid[nrow][ncol]==1)){
                    visited[nrow][ncol] = 2;
                    q.add(new pair(nrow, ncol, t+1));
                    ct++;
                }
            } 
        }

        if(ct!=freashcount) return -1;
        return tm;
    }   

    public static void main(String[] args) {
        int oranges[][] = {{2,1,0,2,1},{1,0,1,2,1},{1,0,0,2,1}};
        System.out.print(orangesrotten(oranges));
    }  
}



class pair{
	int x;
	int y;
	
	pair(int x,int y){
		this.x=x;
		this.y=y;
	}
	
}
public class GraphProblem 
{
	
	public static boolean isSafe(int i ,int j,int [][] grid) {
		
		if(i>=0 && j>=0 && i<grid.length && j<grid[0].length)
			return true;
		return false;
	}
	public static int orangesRotting(int[][] grid) {
        
		int total  = 0;
		int rotten = 0;
		int time   = 0;
		int size   = 0;
		Queue<pair> q = new LinkedList<pair>();
		
		for(int i=0;i<grid.length;i++) {
			
			for(int j =0;j<grid[0].length;j++) {
				
				if(grid[i][j]==1 || grid[i][j]==2)
					total++;
				if(grid[i][j]==2)
					q.offer(new pair(i,j));
			}
		}
		
		if(total==0)
			return 0;
		while(!q.isEmpty()) {
			
			size= q.size();
			
		    rotten+=q.size();
			
			if(total == rotten)
				return time;
			time++;
			
			for(int i=0;i<size;i++) {
				
				pair p = q.poll();
				
				if(isSafe(p.x+1,p.y,grid) && grid[p.x+1][p.y]==1) {
					grid[p.x+1][p.y]=2;
					q.offer(new pair(p.x+1,p.y));
				}
				
				if(isSafe(p.x-1,p.y,grid) && grid[p.x-1][p.y]==1) {
					grid[p.x-1][p.y]=2;
					q.offer(new pair(p.x-1,p.y));
				}
				
				if(isSafe(p.x,p.y+1,grid) && grid[p.x][p.y+1]==1) {
					grid[p.x][p.y+1]=2;
					q.offer(new pair(p.x,p.y+1));
				}
				
				if(isSafe(p.x,p.y-1,grid) && grid[p.x][p.y-1]==1) {
					grid[p.x][p.y-1]=2;
					q.offer(new pair(p.x,p.y-1));
				}
			}
		}
		return -1;
    }
	public static void main(String[] args) {
		
		int grid[][] = {{0,1,2},
				        {0,1,2},
				        {2,1,1}};
		
		System.out.println(orangesRotting(grid));
	}
}
import java.util.*;
public class RottenOrange 
{
	static int R=3;
	static int C=5;
	static boolean issafe(int i, int j)
	{
		if(i>=0 && i<R && j>=0 && j<C)
			return true;
		return false;
	}
	static int rotOranges(int arr[][])
	{
		boolean Rotten = false;
		int no=2;
		while(true)
		{
			for(int i=0;i<R;i++)
			{
				for(int j=0;j<C;j++)
				{
					if(arr[i][j]==no)
					{
						if(issafe(i+1,j) && arr[i+1][j]==1)
						{
							arr[i+1][j]=arr[i][j]+1;
							Rotten = true;
						}
						if(issafe(i,j+1) && arr[i][j+1]==1)
						{
							arr[i][j+1]=arr[i][j]+1;
							Rotten = true;
						}
						if(issafe(i-1,j) && arr[i-1][j]==1)
						{
							arr[i-1][j]=arr[i][j]+1;
							Rotten = true;
						}
						if(issafe(i,j-1) && arr[i][j-1]==1)
						{
							arr[i][j-1]=arr[i][j]+1;
							Rotten = true;
						}
					}
				}
			}
			if(!Rotten)
				break;
			Rotten = false;
			no++;
		}
    for(int i = 0; i < R; i++)
    {
        for(int j = 0; j < C; j++) 
        {
             
            // If any orange is found to be
            // not rotten then ans is not possible
            if (arr[i][j] == 1)
                return -1;
        }
    }
		return no-2;
	}
	public static void main(String[] args) 
	{
		int v[][] =  {{ 2, 1, 0, 2, 1 },
                      { 1, 0, 1, 2, 1 },
                      { 1, 0, 0, 2, 1 }};
        System.out.println("Max time incurred: " +rotOranges(v));
	}
}
// above given solution is Naive Method
// below is efficient solution
import java.util.*;
class coordinate
{
	int x;
	int y;
	coordinate(int x,int y)
	{
		this.x=x;
		this.y=y;
	}
}
public class RottenOrange 
{
	static int R=3;
	static int C=5;
	static boolean issafe(int i, int j)
	{
		if(i>=0 && i<R && j>=0 && j<C)
			return true;
		return false;
	}
	static boolean checkall(int arr[][])
	{
		for(int i=0;i<R;i++)
		{
			for(int j=0;j<C;j++)
			{
				if(arr[i][j]==1)
					return true;
			}
		}
		return false;
	}
	static boolean isDelim(coordinate temp)
	{
		if(temp.x==-1 && temp.y==-1)
			return true;
		return false;
	}
	static int rotOranges(int arr[][])
	{
		int ans=0;
		Queue<coordinate> q = new LinkedList<>();
		for(int i=0;i<R;i++)
		{
			for(int j =0;j<C;j++)
			{
				if(arr[i][j]==2)
					q.add(new coordinate(i,j));
			}
		}
		q.add(new coordinate(-1,-1));
		while(!q.isEmpty())
		{
			boolean flag = false;
			while(!isDelim(q.peek()))
			{
				coordinate temp = q.peek();
				if(issafe(temp.x+1,temp.y) && arr[temp.x+1][temp.y]==1)
				{
					if(!flag)
					{
						ans++;
						flag=true;
					}
					arr[temp.x+1][temp.y]=2;
					temp.x++;
					q.add(new coordinate(temp.x,temp.y));
					temp.x--;
				}
				if(issafe(temp.x-1,temp.y) && arr[temp.x-1][temp.y]==1)
				{
					if(!flag)
					{
						ans++;
						flag=true;
					}
					arr[temp.x-1][temp.y]=2;
					temp.x--;
					q.add(new coordinate(temp.x,temp.y));
					temp.x++;
				}
				if(issafe(temp.x,temp.y+1) && arr[temp.x][temp.y+1]==1)
				{
					if(!flag)
					{
						ans++;
						flag=true;
					}
					arr[temp.x][temp.y+1]=2;
					temp.y++;
					q.add(new coordinate(temp.x,temp.y));
					temp.y--;
				}
				if(issafe(temp.x,temp.y-1) && arr[temp.x][temp.y-1]==1)
				{
					if(!flag)
					{
						ans++;
						flag=true;
					}
					arr[temp.x][temp.y-1]=2;
					temp.y--;
					q.add(new coordinate(temp.x,temp.y));
					temp.y++;
				}
				q.remove();  
			}
			q.remove();
			if(!q.isEmpty())
				q.add(new coordinate(-1,-1));
		}
		return checkall(arr)?-1:ans;
	}
	public static void main(String[] args) 
	{
		int arr[][] = { {1, 1, 0, 1, 1},
                        {1, 0, 1, 1, 1},
                        {1, 0, 0, 1, 1}};
		
        int ans = rotOranges(arr);
        
        if(ans == -1)
             System.out.println("All oranges cannot rot");
        else
             System.out.println("Time required for all oranges to rot = " + ans);
	}
}

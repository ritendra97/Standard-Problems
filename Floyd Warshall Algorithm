//Floyd Warshall Algorithm
import java.util.*;
public class GraphProblem 
{
	final static int INF=999,V=4;
	public static void floydWarshall(int graph[][])
    {
		int dis[][] = new int[V][V];
        int i, j, k;
		for (i = 0; i < V; i++)
            for (j = 0; j < V; j++)
                dis[i][j] = graph[i][j];
		
		for(k=0;k<V;k++)
		{
			for(i=0;i<V;i++)
			{
				for(j=0;j<V;j++)
				{
					if(dis[i][k]+dis[k][j]<dis[i][j])
					{
						dis[i][j]=dis[i][k]+dis[k][j];
					}
				}
			}
		}
		printSolution(dis);
    }
	static void printSolution(int dist[][])
    {
        System.out.println("The following matrix shows the shortest "+
                         "distances between every pair of vertices");
        for (int i=0; i<V; ++i)
        {
            for (int j=0; j<V; ++j)
            {
                if (dist[i][j]==INF)
                    System.out.print("INF ");
                else
                    System.out.print(dist[i][j]+"   ");
            }
            System.out.println();
        }
    }
	public static void main(String[] args) 
	{
		int graph[][]={{0,   3,  INF, 5},
                {2, 0,  INF, INF},
                {INF, 1, 0,  INF},
                {INF, INF, 2, 0}}; 
		floydWarshall(graph);
	}

}

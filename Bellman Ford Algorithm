import java.util.*;
public class GraphProblem 
{
	class Edge { 
        int src, dest, weight; 
        Edge() 
        { 
            src = dest = weight = 0; 
        } 
    }; 
  
    int V, E; 
    Edge edge[]; 
    GraphProblem(int v, int e) 
    { 
        V = v; 
        E = e; 
        edge = new Edge[e]; 
        for (int i = 0; i < e; ++i) 
            edge[i] = new Edge(); 
    } 
	static void BellmanFord(GraphProblem graph,int src)
    {
		int V = graph.V;
		int E = graph.E;
		int dis[] = new int[V];
		Arrays.fill(dis,Integer.MAX_VALUE);
		dis[src]=0;
		for(int i=0;i<V-1;i++)
		{
			for(int j=0;j<E;j++)
			{
				int s = graph.edge[j].src;
				int t = graph.edge[j].dest;
				int weight = graph.edge[j].weight;
				if(dis[s]!=Integer.MAX_VALUE && dis[s]+weight<dis[t])
				{
					dis[t]=dis[s]+weight;
				}
			}
		}
		for(int k=0;k<E;k++)
		{
			int s = graph.edge[k].src; 
            int t = graph.edge[k].dest; 
            int weight = graph.edge[k].weight;
            if(dis[s]!=Integer.MAX_VALUE && dis[s]+weight<dis[t])
			{
            	System.out.println("Graph contains negative weight cycle"); 
                return;
			}
		}
		printArr(dis,V);
    }
	 public static void printArr(int dist[], int V) 
	 { 
	       System.out.println("Distance Source"); 
	        for (int i = 0; i < V; ++i) 
	            System.out.println(i + "     \t" + dist[i]); 
	  }
	public static void main(String[] args) 
	{
		int V = 5; // Number of vertices in graph 
        int E = 8; // Number of edges in graph 
  
        GraphProblem graph = new GraphProblem(V, E); 
  
        // add edge 0-1 (or A-B in above figure) 
        graph.edge[0].src = 0; 
        graph.edge[0].dest = 1; 
        graph.edge[0].weight = -1; 
  
        // add edge 0-2 (or A-C in above figure) 
        graph.edge[1].src = 0; 
        graph.edge[1].dest = 2; 
        graph.edge[1].weight = 4; 
  
        // add edge 1-2 (or B-C in above figure) 
        graph.edge[2].src = 1; 
        graph.edge[2].dest = 2; 
        graph.edge[2].weight = 3; 
  
        // add edge 1-3 (or B-D in above figure) 
        graph.edge[3].src = 1; 
        graph.edge[3].dest = 3; 
        graph.edge[3].weight = 2; 
  
        // add edge 1-4 (or A-E in above figure) 
        graph.edge[4].src = 1; 
        graph.edge[4].dest = 4; 
        graph.edge[4].weight = 2; 
  
        // add edge 3-2 (or D-C in above figure) 
        graph.edge[5].src = 3; 
        graph.edge[5].dest = 2; 
        graph.edge[5].weight = 5; 
  
        // add edge 3-1 (or D-B in above figure) 
        graph.edge[6].src = 3; 
        graph.edge[6].dest = 1; 
        graph.edge[6].weight = 1; 
  
        // add edge 4-3 (or E-D in above figure) 
        graph.edge[7].src = 4; 
        graph.edge[7].dest = 3; 
        graph.edge[7].weight = -3; 
        
        graph.BellmanFord(graph, 0); 
				
	}
}
// Below is by my own
import java.util.*;
class Edge
{
	int src;
	int des;
	int weight;
	Edge(int src,int des,int weight)
	{
		this.src=src;
		this.des=des;
		this.weight=weight;
	}
	Edge()
	{
		src=0;
		des=0;
		weight=0;
	}
}
public class GraphProblem 
{
	int E;
	int V;
    Edge edge[];
	GraphProblem(int e,int v)
	{
		V=v;
		E=e;
		edge = new Edge[E];
		for(int i=0;i<E;i++)
		{
			edge[i]=new Edge();
		}
	}
	public void BellmanFord(GraphProblem g,int src)
    {
		int V = g.V;
		int E = g.E;
		int cost[] = new int[V];
		Arrays.fill(cost,Integer.MAX_VALUE);
		cost[0]=0;
		int parent[] = new int[V];
		parent[0]=-1;
		boolean updated=false;
		for(int i=0;i<V-1;++i)
		{
			for(int j=0;j<E;++j)
			{
				int s = g.edge[j].src;
				int d = g.edge[j].des;
				int weight = g.edge[j].weight;
				if(cost[s]!=Integer.MAX_VALUE && cost[s]+weight<cost[d])
				{
					parent[d]=s;
					cost[d]=cost[s]+weight;
					updated =true;
				}
			}
			if(updated==false)
				break;
		}
		for(int k=0;k<E;k++)
		{
			int s = edge[k].src;
			int d = edge[k].des;
			int weight = edge[k].weight;
			if(cost[s]!=Integer.MAX_VALUE && cost[s]+weight<cost[d])
			{
				System.out.println("Graph contains negative weight cycle"); 
                return;
			}
		}
		   System.out.println("Vertex Distance from Source");
		    for (int i = 0; i < V; i++)
		        System.out.println(i + "\t\t" + cost[i]);
		
    }
	public static void printArr(int dist[], int V) 
	{ 
	     System.out.println("Distance Source"); 
	      for (int i = 0; i < V; ++i) 
	          System.out.println(i + "\t" + dist[i]); 
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(8,5);
		g.edge[0].src=0;
		g.edge[0].des=1;
		g.edge[0].weight=-1;
		
		g.edge[1].src=1;
		g.edge[1].des=2;
		g.edge[1].weight=3;

		g.edge[2].src=1;
		g.edge[2].des=4;
		g.edge[2].weight=3;

		g.edge[3].src=3;
		g.edge[3].des=1;
		g.edge[3].weight=1;

		g.edge[4].src=0;
		g.edge[4].des=2;
		g.edge[4].weight=4;

		g.edge[5].src=2;
		g.edge[5].des=3;
		g.edge[5].weight=2;

		g.edge[6].src=3;
		g.edge[6].des=2;
		g.edge[6].weight=5;

		g.edge[7].src=4;
		g.edge[7].des=3;
		g.edge[7].weight=-3;
		g.BellmanFord(g,0);

	}
}
